#pragma once

namespace sdk
{
#define MAX_SPLITSCREEN_CLIENT_BITS 2
	// this should == MAX_JOYSTICKS in InputEnums.h
#define MAX_SPLITSCREEN_CLIENTS	( 1 << MAX_SPLITSCREEN_CLIENT_BITS ) // 4

	enum
	{
		MAX_JOYSTICKS = MAX_SPLITSCREEN_CLIENTS,
		MOUSE_BUTTON_COUNT = 5,
	};

	enum JoystickAxis_t
	{
		JOY_AXIS_X = 0,
		JOY_AXIS_Y,
		JOY_AXIS_Z,
		JOY_AXIS_R,
		JOY_AXIS_U,
		JOY_AXIS_V,
		MAX_JOYSTICK_AXES,
	};

	enum
	{
		JOYSTICK_MAX_BUTTON_COUNT = 32,
		JOYSTICK_POV_BUTTON_COUNT = 4,
		JOYSTICK_AXIS_BUTTON_COUNT = MAX_JOYSTICK_AXES * 2,
	};

#define JOYSTICK_BUTTON_INTERNAL( _joystick, _button ) ( JOYSTICK_FIRST_BUTTON + ((_joystick) * JOYSTICK_MAX_BUTTON_COUNT) + (_button) )
#define JOYSTICK_POV_BUTTON_INTERNAL( _joystick, _button ) ( JOYSTICK_FIRST_POV_BUTTON + ((_joystick) * JOYSTICK_POV_BUTTON_COUNT) + (_button) )
#define JOYSTICK_AXIS_BUTTON_INTERNAL( _joystick, _button ) ( JOYSTICK_FIRST_AXIS_BUTTON + ((_joystick) * JOYSTICK_AXIS_BUTTON_COUNT) + (_button) )

#define JOYSTICK_BUTTON( _joystick, _button ) ( (ButtonCode_t)JOYSTICK_BUTTON_INTERNAL( _joystick, _button ) )
#define JOYSTICK_POV_BUTTON( _joystick, _button ) ( (ButtonCode_t)JOYSTICK_POV_BUTTON_INTERNAL( _joystick, _button ) )
#define JOYSTICK_AXIS_BUTTON( _joystick, _button ) ( (ButtonCode_t)JOYSTICK_AXIS_BUTTON_INTERNAL( _joystick, _button ) )
	enum ButtonCode_t
	{
		BUTTON_CODE_INVALID = -1,
		BUTTON_CODE_NONE = 0,

		KEY_FIRST = 0,

		KEY_NONE = KEY_FIRST,
		KEY_0,
		KEY_1,
		KEY_2,
		KEY_3,
		KEY_4,
		KEY_5,
		KEY_6,
		KEY_7,
		KEY_8,
		KEY_9,
		KEY_A,
		KEY_B,
		KEY_C,
		KEY_D,
		KEY_E,
		KEY_F,
		KEY_G,
		KEY_H,
		KEY_I,
		KEY_J,
		KEY_K,
		KEY_L,
		KEY_M,
		KEY_N,
		KEY_O,
		KEY_P,
		KEY_Q,
		KEY_R,
		KEY_S,
		KEY_T,
		KEY_U,
		KEY_V,
		KEY_W,
		KEY_X,
		KEY_Y,
		KEY_Z,
		KEY_PAD_0,
		KEY_PAD_1,
		KEY_PAD_2,
		KEY_PAD_3,
		KEY_PAD_4,
		KEY_PAD_5,
		KEY_PAD_6,
		KEY_PAD_7,
		KEY_PAD_8,
		KEY_PAD_9,
		KEY_PAD_DIVIDE,
		KEY_PAD_MULTIPLY,
		KEY_PAD_MINUS,
		KEY_PAD_PLUS,
		KEY_PAD_ENTER,
		KEY_PAD_DECIMAL,
		KEY_LBRACKET,
		KEY_RBRACKET,
		KEY_SEMICOLON,
		KEY_APOSTROPHE,
		KEY_BACKQUOTE,
		KEY_COMMA,
		KEY_PERIOD,
		KEY_SLASH,
		KEY_BACKSLASH,
		KEY_MINUS,
		KEY_EQUAL,
		KEY_ENTER,
		KEY_SPACE,
		KEY_BACKSPACE,
		KEY_TAB,
		KEY_CAPSLOCK,
		KEY_NUMLOCK,
		KEY_ESCAPE,
		KEY_SCROLLLOCK,
		KEY_INSERT,
		KEY_DELETE,
		KEY_HOME,
		KEY_END,
		KEY_PAGEUP,
		KEY_PAGEDOWN,
		KEY_BREAK,
		KEY_LSHIFT,
		KEY_RSHIFT,
		KEY_LALT,
		KEY_RALT,
		KEY_LCONTROL,
		KEY_RCONTROL,
		KEY_LWIN,
		KEY_RWIN,
		KEY_APP,
		KEY_UP,
		KEY_LEFT,
		KEY_DOWN,
		KEY_RIGHT,
		KEY_F1,
		KEY_F2,
		KEY_F3,
		KEY_F4,
		KEY_F5,
		KEY_F6,
		KEY_F7,
		KEY_F8,
		KEY_F9,
		KEY_F10,
		KEY_F11,
		KEY_F12,
		KEY_CAPSLOCKTOGGLE,
		KEY_NUMLOCKTOGGLE,
		KEY_SCROLLLOCKTOGGLE,

		KEY_LAST = KEY_SCROLLLOCKTOGGLE,
		KEY_COUNT = KEY_LAST - KEY_FIRST + 1,

		// Mouse
		MOUSE_FIRST = KEY_LAST + 1,

		MOUSE_LEFT = MOUSE_FIRST,
		MOUSE_RIGHT,
		MOUSE_MIDDLE,
		MOUSE_4,
		MOUSE_5,
		MOUSE_WHEEL_UP,		// A fake button which is 'pressed' and 'released' when the wheel is moved up 
		MOUSE_WHEEL_DOWN,	// A fake button which is 'pressed' and 'released' when the wheel is moved down

		MOUSE_LAST = MOUSE_WHEEL_DOWN,
		MOUSE_COUNT = MOUSE_LAST - MOUSE_FIRST + 1,

		// Joystick
		JOYSTICK_FIRST = MOUSE_LAST + 1,

		JOYSTICK_FIRST_BUTTON = JOYSTICK_FIRST,
		JOYSTICK_LAST_BUTTON = JOYSTICK_BUTTON_INTERNAL(MAX_JOYSTICKS - 1, JOYSTICK_MAX_BUTTON_COUNT - 1),
		JOYSTICK_FIRST_POV_BUTTON,
		JOYSTICK_LAST_POV_BUTTON = JOYSTICK_POV_BUTTON_INTERNAL(MAX_JOYSTICKS - 1, JOYSTICK_POV_BUTTON_COUNT - 1),
		JOYSTICK_FIRST_AXIS_BUTTON,
		JOYSTICK_LAST_AXIS_BUTTON = JOYSTICK_AXIS_BUTTON_INTERNAL(MAX_JOYSTICKS - 1, JOYSTICK_AXIS_BUTTON_COUNT - 1),

		JOYSTICK_LAST = JOYSTICK_LAST_AXIS_BUTTON,

		BUTTON_CODE_LAST,
		BUTTON_CODE_COUNT = BUTTON_CODE_LAST - KEY_FIRST + 1,

		// Helpers for XBox 360
		KEY_XBUTTON_UP = JOYSTICK_FIRST_POV_BUTTON,	// POV buttons
		KEY_XBUTTON_RIGHT,
		KEY_XBUTTON_DOWN,
		KEY_XBUTTON_LEFT,

		KEY_XBUTTON_A = JOYSTICK_FIRST_BUTTON,		// Buttons
		KEY_XBUTTON_B,
		KEY_XBUTTON_X,
		KEY_XBUTTON_Y,
		KEY_XBUTTON_LEFT_SHOULDER,
		KEY_XBUTTON_RIGHT_SHOULDER,
		KEY_XBUTTON_BACK,
		KEY_XBUTTON_START,
		KEY_XBUTTON_STICK1,
		KEY_XBUTTON_STICK2,
		KEY_XBUTTON_INACTIVE_START,

		KEY_XSTICK1_RIGHT = JOYSTICK_FIRST_AXIS_BUTTON,	// XAXIS POSITIVE
		KEY_XSTICK1_LEFT,							// XAXIS NEGATIVE
		KEY_XSTICK1_DOWN,							// YAXIS POSITIVE
		KEY_XSTICK1_UP,								// YAXIS NEGATIVE
		KEY_XBUTTON_LTRIGGER,						// ZAXIS POSITIVE
		KEY_XBUTTON_RTRIGGER,						// ZAXIS NEGATIVE
		KEY_XSTICK2_RIGHT,							// UAXIS POSITIVE
		KEY_XSTICK2_LEFT,							// UAXIS NEGATIVE
		KEY_XSTICK2_DOWN,							// VAXIS POSITIVE
		KEY_XSTICK2_UP,								// VAXIS NEGATIVE
	};

	enum class clientframestage_t {
		frame_undefined = -1,
		frame_start,
		frame_net_update_start,
		frame_net_update_postdataupdate_start,
		frame_net_update_postdataupdate_end,
		frame_net_update_end,
		frame_render_start,
		frame_render_end
	};

	enum ecstrike15usermessages
	{
		cs_um_vguimenu = 1,
		cs_um_geiger = 2,
		cs_um_train = 3,
		cs_um_hudtext = 4,
		cs_um_saytext = 5,
		cs_um_saytext2 = 6,
		cs_um_textmsg = 7,
		cs_um_hudmsg = 8,
		cs_um_resethud = 9,
		cs_um_gametitle = 10,
		cs_um_shake = 12,
		cs_um_fade = 13,
		cs_um_rumble = 14,
		cs_um_closecaption = 15,
		cs_um_closecaptiondirect = 16,
		cs_um_sendaudio = 17,
		cs_um_rawaudio = 18,
		cs_um_voicemask = 19,
		cs_um_requeststate = 20,
		cs_um_damage = 21,
		cs_um_radiotext = 22,
		cs_um_hinttext = 23,
		cs_um_keyhinttext = 24,
		cs_um_processspottedentityupdate = 25,
		cs_um_reloadeffect = 26,
		cs_um_adjustmoney = 27,
		cs_um_updateteammoney = 28,
		cs_um_stopspectatormode = 29,
		cs_um_killcam = 30,
		cs_um_desiredtimescale = 31,
		cs_um_currenttimescale = 32,
		cs_um_achievementevent = 33,
		cs_um_matchendconditions = 34,
		cs_um_disconnecttolobby = 35,
		cs_um_playerstatsupdate = 36,
		cs_um_displayinventory = 37,
		cs_um_warmuphasended = 38,
		cs_um_clientinfo = 39,
		cs_um_xrankget = 40,
		cs_um_xrankupd = 41,
		cs_um_callvotefailed = 45,
		cs_um_votestart = 46,
		cs_um_votepass = 47,
		cs_um_votefailed = 48,
		cs_um_votesetup = 49,
		cs_um_serverrankrevealall = 50,
		cs_um_sendlastkillerdamagetoclient = 51,
		cs_um_serverrankupdate = 52,
		cs_um_itempickup = 53,
		cs_um_showmenu = 54,
		cs_um_bartime = 55,
		cs_um_ammodenied = 56,
		cs_um_markachievement = 57,
		cs_um_matchstatsupdate = 58,
		cs_um_itemdrop = 59,
		cs_um_glowpropturnoff = 60,
		cs_um_sendplayeritemdrops = 61,
		cs_um_roundbackupfilenames = 62,
		cs_um_sendplayeritemfound = 63,
		cs_um_reporthit = 64,
		cs_um_xpupdate = 65,
		cs_um_questprogress = 66,
		cs_um_scoreleaderboarddata = 67,
		cs_um_playerdecaldigitalsignature = 68,
		max_ecstrike15usermessages
	};


	enum itemdefinitionindex
	{
		item_none = 0,
		weapon_deagle = 1,
		weapon_elite = 2,
		weapon_fiveseven = 3,
		weapon_glock = 4,
		weapon_ak47 = 7,
		weapon_aug = 8,
		weapon_awp = 9,
		weapon_famas = 10,
		weapon_g3sg1 = 11,
		weapon_galilar = 13,
		weapon_m249 = 14,
		weapon_m4a1 = 16,
		weapon_mac10 = 17,
		weapon_p90 = 19,
		weapon_ump45 = 20,
		weapon_xm1014 = 21,
		weapon_bizon = 22,
		weapon_mag7 = 23,
		weapon_negev = 24,
		weapon_sawedoff = 25,
		weapon_tec9 = 26,
		weapon_taser = 27,
		weapon_hkp2000 = 28,
		weapon_mp7 = 29,
		weapon_mp9 = 30,
		weapon_nova = 31,
		weapon_p250 = 32,
		weapon_scar20 = 33,
		weapon_sg556 = 34,
		weapon_ssg08 = 35,
		weapon_knife = 36,
		weapon_flashbang = 37,
		weapon_hegrenade = 38,
		weapon_smokegrenade = 39,
		weapon_molotov = 40,
		weapon_decoy = 41,
		weapon_incgrenade = 42,
		weapon_c4 = 43,
		weapon_knife_t = 44,
		weapon_m4a1_silencer = 45,
		weapon_usp_silencer = 46,
		weapon_cz75a = 47,
		weapon_revolver = 48,
		weapon_bayonet = 500,
		weapon_knife_flip = 505,
		weapon_knife_gut = 506,
		weapon_knife_karambit = 507,
		weapon_knife_m9_bayonet = 508,
		weapon_knife_tactical = 509,
		weapon_knife_falchion = 512,
		weapon_knife_survival_bowie = 514,
		weapon_knife_butterfly = 515,
		weapon_knife_push = 516,
		glove_studded_bloodhound = 5027,
		glove_t_side = 5028,
		glove_ct_side = 5029,
		glove_sporty = 5030,
		glove_slick = 5031,
		glove_leather_wrap = 5032,
		glove_motorcycle = 5033,
		glove_specialist = 5034,
		max_itemdefinitionindex
	};

	enum classid
	{
		classid_cai_basenpc = 0,
		classid_cak47,
		classid_cbaseanimating,
		classid_cbaseanimatingoverlay,
		classid_cbaseattributableitem,
		classid_cbasebutton,
		classid_cbasecombatcharacter,
		classid_cbasecombatweapon,
		classid_cbasecsgrenade,
		classid_cbasecsgrenadeprojectile,
		classid_cbasedoor,
		classid_cbaseentity,
		classid_cbaseflex,
		classid_cbasegrenade,
		classid_cbaseparticleentity,
		classid_cbaseplayer,
		classid_cbasepropdoor,
		classid_cbaseteamobjectiveresource,
		classid_cbasetempentity,
		classid_cbasetoggle,
		classid_cbasetrigger,
		classid_cbaseviewmodel,
		classid_cbasevphysicstrigger,
		classid_cbaseweaponworldmodel,
		classid_cbeam,
		classid_cbeamspotlight,
		classid_cbonefollower,
		classid_cbreakableprop,
		classid_cbreakablesurface,
		classid_cc4,
		classid_ccascadelight,
		classid_cchicken,
		classid_ccolorcorrection,
		classid_ccolorcorrectionvolume,
		classid_ccsgamerulesproxy,
		classid_ccsplayer,
		classid_ccsplayerresource,
		classid_ccsragdoll,
		classid_ccsteam,
		classid_cdeagle,
		classid_cdecoygrenade,
		classid_cdecoyprojectile,
		classid_cdynamiclight,
		classid_cdynamicprop,
		classid_ceconentity,
		classid_ceconwearable,
		classid_cembers,
		classid_centitydissolve,
		classid_centityflame,
		classid_centityfreezing,
		classid_centityparticletrail,
		classid_cenvambientlight,
		classid_cenvdetailcontroller,
		classid_cenvdofcontroller,
		classid_cenvparticlescript,
		classid_cenvprojectedtexture,
		classid_cenvquadraticbeam,
		classid_cenvscreeneffect,
		classid_cenvscreenoverlay,
		classid_cenvtonemapcontroller,
		classid_cenvwind,
		classid_cfeplayerdecal,
		classid_cfirecrackerblast,
		classid_cfiresmoke,
		classid_cfiretrail,
		classid_cfish,
		classid_cflashbang,
		classid_cfogcontroller,
		classid_cfootstepcontrol,
		classid_cfunc_dust,
		classid_cfunc_lod,
		classid_cfuncareaportalwindow,
		classid_cfuncbrush,
		classid_cfuncconveyor,
		classid_cfuncladder,
		classid_cfuncmonitor,
		classid_cfuncmovelinear,
		classid_cfuncoccluder,
		classid_cfuncreflectiveglass,
		classid_cfuncrotating,
		classid_cfuncsmokevolume,
		classid_cfunctracktrain,
		classid_cgamerulesproxy,
		classid_chandletest,
		classid_chegrenade,
		classid_chostage,
		classid_chostagecarriableprop,
		classid_cincendiarygrenade,
		classid_cinferno,
		classid_cinfoladderdismount,
		classid_cinfooverlayaccessor,
		classid_citem_healthshot,
		classid_citemdogtags,
		classid_cknife,
		classid_cknifegg,
		classid_clightglow,
		classid_cmaterialmodifycontrol,
		classid_cmolotovgrenade,
		classid_cmolotovprojectile,
		classid_cmoviedisplay,
		classid_cparticlefire,
		classid_cparticleperformancemonitor,
		classid_cparticlesystem,
		classid_cphysbox,
		classid_cphysboxmultiplayer,
		classid_cphysicsprop,
		classid_cphysicspropmultiplayer,
		classid_cphysmagnet,
		classid_cplantedc4,
		classid_cplasma,
		classid_cplayerresource,
		classid_cpointcamera,
		classid_cpointcommentarynode,
		classid_cpointworldtext,
		classid_cposecontroller,
		classid_cpostprocesscontroller,
		classid_cprecipitation,
		classid_cprecipitationblocker,
		classid_cpredictedviewmodel,
		classid_cprop_hallucination,
		classid_cpropdoorrotating,
		classid_cpropjeep,
		classid_cpropvehicledriveable,
		classid_cragdollmanager,
		classid_cragdollprop,
		classid_cragdollpropattached,
		classid_cropekeyframe,
		classid_cscar17,
		classid_csceneentity,
		classid_csensorgrenade,
		classid_csensorgrenadeprojectile,
		classid_cshadowcontrol,
		classid_cslideshowdisplay,
		classid_csmokegrenade,
		classid_csmokegrenadeprojectile,
		classid_csmokestack,
		classid_cspatialentity,
		classid_cspotlightend,
		classid_csprite,
		classid_cspriteoriented,
		classid_cspritetrail,
		classid_cstatueprop,
		classid_csteamjet,
		classid_csun,
		classid_csunlightshadowcontrol,
		classid_cteam,
		classid_cteamplayroundbasedrulesproxy,
		classid_ctearmorricochet,
		classid_ctebasebeam,
		classid_ctebeamentpoint,
		classid_ctebeaments,
		classid_ctebeamfollow,
		classid_ctebeamlaser,
		classid_ctebeampoints,
		classid_ctebeamring,
		classid_ctebeamringpoint,
		classid_ctebeamspline,
		classid_ctebloodsprite,
		classid_ctebloodstream,
		classid_ctebreakmodel,
		classid_ctebspdecal,
		classid_ctebubbles,
		classid_ctebubbletrail,
		classid_cteclientprojectile,
		classid_ctedecal,
		classid_ctedust,
		classid_ctedynamiclight,
		classid_cteeffectdispatch,
		classid_cteenergysplash,
		classid_cteexplosion,
		classid_ctefirebullets,
		classid_ctefizz,
		classid_ctefootprintdecal,
		classid_ctefoundryhelpers,
		classid_ctegaussexplosion,
		classid_cteglowsprite,
		classid_cteimpact,
		classid_ctekillplayerattachments,
		classid_ctelargefunnel,
		classid_ctemetalsparks,
		classid_ctemuzzleflash,
		classid_cteparticlesystem,
		classid_ctephysicsprop,
		classid_cteplantbomb,
		classid_cteplayeranimevent,
		classid_cteplayerdecal,
		classid_cteprojecteddecal,
		classid_cteradioicon,
		classid_cteshattersurface,
		classid_cteshowline,
		classid_ctesla,
		classid_ctesmoke,
		classid_ctesparks,
		classid_ctesprite,
		classid_ctespritespray,
		classid_ctest_proxytoggle_networkable,
		classid_ctesttraceline,
		classid_cteworlddecal,
		classid_ctriggerplayermovement,
		classid_ctriggersoundoperator,
		classid_cvguiscreen,
		classid_cvotecontroller,
		classid_cwaterbullet,
		classid_cwaterlodcontrol,
		classid_cweaponaug,
		classid_cweaponawp,
		classid_cweaponbaseitem,
		classid_cweaponbizon,
		classid_cweaponcsbase,
		classid_cweaponcsbasegun,
		classid_cweaponcycler,
		classid_cweaponelite,
		classid_cweaponfamas,
		classid_cweaponfiveseven,
		classid_cweapong3sg1,
		classid_cweapongalil,
		classid_cweapongalilar,
		classid_cweaponglock,
		classid_cweaponhkp2000,
		classid_cweaponm249,
		classid_cweaponm3,
		classid_cweaponm4a1,
		classid_cweaponmac10,
		classid_cweaponmag7,
		classid_cweaponmp5navy,
		classid_cweaponmp7,
		classid_cweaponmp9,
		classid_cweaponnegev,
		classid_cweaponnova,
		classid_cweaponp228,
		classid_cweaponp250,
		classid_cweaponp90,
		classid_cweaponsawedoff,
		classid_cweaponscar20,
		classid_cweaponscout,
		classid_cweaponsg550,
		classid_cweaponsg552,
		classid_cweaponsg556,
		classid_cweaponssg08,
		classid_cweapontaser,
		classid_cweapontec9,
		classid_cweapontmp,
		classid_cweaponump45,
		classid_cweaponusp,
		classid_cweaponxm1014,
		classid_cworld,
		classid_dusttrail,
		classid_movieexplosion,
		classid_particlesmokegrenade,
		classid_rockettrail,
		classid_smoketrail,
		classid_sporeexplosion,
		classid_sporetrail,
		max_classid
	};

	enum ecsplayerbones
	{
		pelvis = 0,
		spine_0,
		spine_1,
		spine_2,
		spine_3,
		neck_0,
		head_0,
		clavicle_l,
		arm_upper_l,
		arm_lower_l,
		hand_l,
		finger_middle_meta_l,
		finger_middle_0_l,
		finger_middle_1_l,
		finger_middle_2_l,
		finger_pinky_meta_l,
		finger_pinky_0_l,
		finger_pinky_1_l,
		finger_pinky_2_l,
		finger_index_meta_l,
		finger_index_0_l,
		finger_index_1_l,
		finger_index_2_l,
		finger_thumb_0_l,
		finger_thumb_1_l,
		finger_thumb_2_l,
		finger_ring_meta_l,
		finger_ring_0_l,
		finger_ring_1_l,
		finger_ring_2_l,
		weapon_hand_l,
		arm_lower_l_twist,
		arm_lower_l_twist1,
		arm_upper_l_twist,
		arm_upper_l_twist1,
		clavicle_r,
		arm_upper_r,
		arm_lower_r,
		hand_r,
		finger_middle_meta_r,
		finger_middle_0_r,
		finger_middle_1_r,
		finger_middle_2_r,
		finger_pinky_meta_r,
		finger_pinky_0_r,
		finger_pinky_1_r,
		finger_pinky_2_r,
		finger_index_meta_r,
		finger_index_0_r,
		finger_index_1_r,
		finger_index_2_r,
		finger_thumb_0_r,
		finger_thumb_1_r,
		finger_thumb_2_r,
		finger_ring_meta_r,
		finger_ring_0_r,
		finger_ring_1_r,
		finger_ring_2_r,
		weapon_hand_r,
		arm_lower_r_twist,
		arm_lower_r_twist1,
		arm_upper_r_twist,
		arm_upper_r_twist1,
		leg_upper_l,
		leg_lower_l,
		ankle_l,
		ball_l,
		lfoot_lock,
		leg_upper_l_twist,
		leg_upper_l_twist1,
		leg_upper_r,
		leg_lower_r,
		ankle_r,
		ball_r,
		rfoot_lock,
		leg_upper_r_twist,
		leg_upper_r_twist1,
		finger_pinky_l_end,
		finger_pinky_r_end,
		valvebiped_weapon_bone,
		lh_ik_driver,
		primary_jiggle_jnt,
		max_ecsplayerbones
	};

	enum entityflags
	{
		fl_onground = (1 << 0),
		fl_ducking = (1 << 1),
		fl_waterjump = (1 << 2),
		fl_ontrain = (1 << 3),
		fl_inrain = (1 << 4),
		fl_frozen = (1 << 5),
		fl_atcontrols = (1 << 6),
		fl_client = (1 << 7),
		fl_fakeclient = (1 << 8),
		max_entityflags
	};

	enum lifestate : unsigned char
	{
		life_alive = 0,// alive
		life_dying = 1, // playing death animation or still falling off of a ledge waiting to hit ground
		life_dead = 2, // dead. lying still.
		max_lifestate
	};

	enum weaponsound_t
	{
		empty,
		single,
		single_npc,
		wpn_double, // can't be "double" because windows.h uses it.
		double_npc,
		burst,
		reload,
		reload_npc,
		melee_miss,
		melee_hit,
		melee_hit_world,
		special1,
		special2,
		special3,
		taunt,
		fast_reload,
		// add new shoot sound types here
		reverse_the_new_sound,
		num_shoot_sound_types,
		max_weaponsound
	};

	enum movetype_t
	{
		movetype_none = 0,
		movetype_isometric,
		movetype_walk,
		movetype_step,
		movetype_fly,
		movetype_flygravity,
		movetype_vphysics,
		movetype_push,
		movetype_noclip,
		movetype_ladder,
		movetype_observer,
		movetype_custom,
		movetype_last = movetype_custom,
		movetype_max_bits = 4,
		max_movetype
	};
}